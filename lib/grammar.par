[*

*]

/~~~ TERMINALS ~~~/

!	' |\r|\n|\t|//[^\n]*\n' /~ Multiline comments impossible ~/

	'cry'
	'debug'
	'return'
	'if'
	'else'
	'{'
	'}'
	';'
	/~'(\r|\n|\r\n)'			LineBreak~/
	','
	'\.'
	':'
	'='
	'=='
	'!='
	'<='
	'>='
	'>'
	'<'
	'\+'
	'\-'
	'/'
	'\*'
	'\('
	'\)'
	'#'
	'[A-Za-z_][A-Za-z0-9_]*'	Identifier
	'\'([^\']|\'\')*\''		String		[* %match = %match.substr( 1, %match.length - 2 ); %match = %match.replace( /''/g, "\'" ); *]
	'[0-9]+'			Integer		[* %match = parseInt(%match); *]
	'[0-9]+\.[0-9]+'		Float		[* %match = parseFloat(%match); *]
	;

##

/~~~ NON-TERMINALS (GRAMMAR) ~~~/

/~ May be empty! ~/
script:     script action 		[* scope.execute( %2 ); *]
            | action		[* scope.execute( %1 ); *]
            ;

action:     cry expression		[* %% = new Node( NODE_OP, OP_CRY, [%2] ); *]
            | debug			[* %% = new Node( NODE_OP, OP_DEBUG ); *]
            | return expression	[* %% = new Node( NODE_OP, OP_RET, [%2]); *]
            | return		[* %% = new Node( NODE_OP, OP_RET); *]
            | control-struct
            | expression
            | ';'			[* %% = new Node( NODE_OP, OP_NONE); *]
            ;

assignment: variable '=' expression	[* %% = new Node( NODE_OP, OP_ASSIGN, [%1, %3] ); *]
            ;

expression: expression '==' AddSubExp	[* %% = new Node( NODE_OP, OP_EQU, [%1, %3] ); *]
            | expression '<' AddSubExp	[* %% = new Node( NODE_OP, OP_LOT, [%1, %3] ); *]
            | expression '>' AddSubExp	[* %% = new Node( NODE_OP, OP_GRT, [%1, %3] ); *]
            | expression '<=' AddSubExp	[* %% = new Node( NODE_OP, OP_LOE, [%1, %3] ); *]
            | expression '>=' AddSubExp	[* %% = new Node( NODE_OP, OP_GRE, [%1, %3] ); *]
            | expression '!=' AddSubExp	[* %% = new Node( NODE_OP, OP_NEQ, [%1, %3] ); *]
            | AddSubExp
            | assignment
            ;

AddSubExp:  AddSubExp '-' MulDivExp            [* %% = new Node( NODE_OP, OP_SUB, [%1, %3] ); *]
            | AddSubExp '+' MulDivExp          [* %% = new Node( NODE_OP, OP_ADD, [%1, %3] ); *]
            | MulDivExp
            ;
				
MulDivExp:  MulDivExp '*' NegExp		[* %% = new Node( NODE_OP, OP_MUL, [%1, %3] ); *]
            | MulDivExp '/' NegExp		[* %% = new Node( NODE_OP, OP_DIV, [%1, %3] ); *]
            | NegExp
            ;
				
NegExp:     '-' value			[* %% = new Node( NODE_OP, OP_NEG, [%2] ); *]
            | value
            ;

value:      Integer				[* %% = new Node( NODE_NUM, %1 ); *]
            | Float				[* %% = new Node( NODE_NUM, %1 ); *]
            | String			[* %% = new Node( NODE_STR, %1 ); *]
            | variable			[* %% = new Node( NODE_VAR, %1 ); *]
            | function-def
            | function-call
            | '(' expression ')'		[* %% = new Node(NODE_EXPR, %2); *]
            ;

/~ ternary-expression fehlt noch ~/

variable:   Identifier
/~            | variable variable ~/
             ;

function-call: expression "(" arguments ")"	[* %% = new Node( NODE_CALL, %1, [%3] ); *]
               | expression "(" ")"		[* %% = new Node( NODE_CALL, %1 ); *]
               ;
arguments:  expression "," arguments		[* %% = new Node( NODE_ARG, %1, [%3] ); *]
            | expression			[* %% = new Node( NODE_ARG, new Node(NODE_EXPR, %1) ); *]
            ;

function-def: "{" parameters ":" code "}"	[* %% = new Node( NODE_FUNC, %4, [%2] ); *]
              | "{" code "}"			[* %% = new Node( NODE_FUNC, %2 ); *]
              ;
		 
parameters: Identifier parameters		[* %% = new Node( NODE_PARAM, %1, [%2] ); *]
            | Identifier			[* %% = new Node( NODE_PARAM, %1 ); *]
            ;

code:       action code 			[* %% = new Node( NODE_ACT, %1, [%2] ); *]
            | action			[* %% = new Node( NODE_ACT, %1 ); *]
            ;

control-struct: if-else-statement
                ;

if-else-statement: if expression action ';' else action ';'	[* %% = new Node(NODE_OP, OP_IFELSE, [%2, %3, %6]) *]
                   | if expression action ';'		[* %% = new Node(NODE_OP, OP_IFELSE, [%2, %3]) *]
                   ;
          

[*

*]